{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BestFitMatcher = void 0;\n\nvar BestAvailableLocale_1 = require(\"./BestAvailableLocale\");\n\nvar utils_1 = require(\"./utils\");\n/**\n * https://tc39.es/ecma402/#sec-bestfitmatcher\n * @param availableLocales\n * @param requestedLocales\n * @param getDefaultLocale\n */\n\n\nfunction BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {\n  var minimizedAvailableLocaleMap = {};\n  availableLocales.forEach(function (l) {\n    return minimizedAvailableLocaleMap[l] = l;\n  });\n  var minimizedAvailableLocales = new Set();\n  availableLocales.forEach(function (locale) {\n    var minimizedLocale = new Intl.Locale(locale).minimize().toString();\n    minimizedAvailableLocaleMap[minimizedLocale] = locale;\n    minimizedAvailableLocales.add(minimizedLocale);\n  });\n  var foundLocale;\n\n  for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {\n    var l = requestedLocales_1[_i];\n\n    if (foundLocale) {\n      break;\n    }\n\n    var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');\n\n    if (availableLocales.has(noExtensionLocale)) {\n      foundLocale = noExtensionLocale;\n      break;\n    }\n\n    if (minimizedAvailableLocales.has(noExtensionLocale)) {\n      foundLocale = noExtensionLocale;\n      break;\n    }\n\n    var locale = new Intl.Locale(noExtensionLocale);\n    var maximizedRequestedLocale = locale.maximize().toString();\n    var minimizedRequestedLocale = locale.minimize().toString(); // Check minimized locale\n\n    if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {\n      foundLocale = minimizedRequestedLocale;\n      break;\n    } // Lookup algo on maximized locale\n\n\n    foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);\n  }\n\n  return {\n    locale: foundLocale && minimizedAvailableLocaleMap[foundLocale] || getDefaultLocale()\n  };\n}\n\nexports.BestFitMatcher = BestFitMatcher;","map":{"version":3,"sources":["C:/Users/Shahwaiz Nathani/Desktop/mutrajim-fyp/Mehnat-o-Musshakat/node_modules/@formatjs/intl-localematcher/abstract/BestFitMatcher.js"],"names":["Object","defineProperty","exports","value","BestFitMatcher","BestAvailableLocale_1","require","utils_1","availableLocales","requestedLocales","getDefaultLocale","minimizedAvailableLocaleMap","forEach","l","minimizedAvailableLocales","Set","locale","minimizedLocale","Intl","Locale","minimize","toString","add","foundLocale","_i","requestedLocales_1","length","noExtensionLocale","replace","UNICODE_EXTENSION_SEQUENCE_REGEX","has","maximizedRequestedLocale","maximize","minimizedRequestedLocale","BestAvailableLocale"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,uBAAD,CAAnC;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAArB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,cAAT,CAAwBI,gBAAxB,EAA0CC,gBAA1C,EAA4DC,gBAA5D,EAA8E;AAC1E,MAAIC,2BAA2B,GAAG,EAAlC;AACAH,EAAAA,gBAAgB,CAACI,OAAjB,CAAyB,UAAUC,CAAV,EAAa;AAAE,WAAQF,2BAA2B,CAACE,CAAD,CAA3B,GAAiCA,CAAzC;AAA8C,GAAtF;AACA,MAAIC,yBAAyB,GAAG,IAAIC,GAAJ,EAAhC;AACAP,EAAAA,gBAAgB,CAACI,OAAjB,CAAyB,UAAUI,MAAV,EAAkB;AACvC,QAAIC,eAAe,GAAG,IAAIC,IAAI,CAACC,MAAT,CAAgBH,MAAhB,EACjBI,QADiB,GAEjBC,QAFiB,EAAtB;AAGAV,IAAAA,2BAA2B,CAACM,eAAD,CAA3B,GAA+CD,MAA/C;AACAF,IAAAA,yBAAyB,CAACQ,GAA1B,CAA8BL,eAA9B;AACH,GAND;AAOA,MAAIM,WAAJ;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,kBAAkB,GAAGhB,gBAAtC,EAAwDe,EAAE,GAAGC,kBAAkB,CAACC,MAAhF,EAAwFF,EAAE,EAA1F,EAA8F;AAC1F,QAAIX,CAAC,GAAGY,kBAAkB,CAACD,EAAD,CAA1B;;AACA,QAAID,WAAJ,EAAiB;AACb;AACH;;AACD,QAAII,iBAAiB,GAAGd,CAAC,CAACe,OAAF,CAAUrB,OAAO,CAACsB,gCAAlB,EAAoD,EAApD,CAAxB;;AACA,QAAIrB,gBAAgB,CAACsB,GAAjB,CAAqBH,iBAArB,CAAJ,EAA6C;AACzCJ,MAAAA,WAAW,GAAGI,iBAAd;AACA;AACH;;AACD,QAAIb,yBAAyB,CAACgB,GAA1B,CAA8BH,iBAA9B,CAAJ,EAAsD;AAClDJ,MAAAA,WAAW,GAAGI,iBAAd;AACA;AACH;;AACD,QAAIX,MAAM,GAAG,IAAIE,IAAI,CAACC,MAAT,CAAgBQ,iBAAhB,CAAb;AACA,QAAII,wBAAwB,GAAGf,MAAM,CAACgB,QAAP,GAAkBX,QAAlB,EAA/B;AACA,QAAIY,wBAAwB,GAAGjB,MAAM,CAACI,QAAP,GAAkBC,QAAlB,EAA/B,CAhB0F,CAiB1F;;AACA,QAAIP,yBAAyB,CAACgB,GAA1B,CAA8BG,wBAA9B,CAAJ,EAA6D;AACzDV,MAAAA,WAAW,GAAGU,wBAAd;AACA;AACH,KArByF,CAsB1F;;;AACAV,IAAAA,WAAW,GAAG,CAAC,GAAGlB,qBAAqB,CAAC6B,mBAA1B,EAA+CpB,yBAA/C,EAA0EiB,wBAA1E,CAAd;AACH;;AACD,SAAO;AACHf,IAAAA,MAAM,EAAGO,WAAW,IAAIZ,2BAA2B,CAACY,WAAD,CAA3C,IACJb,gBAAgB;AAFjB,GAAP;AAIH;;AACDR,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BestFitMatcher = void 0;\nvar BestAvailableLocale_1 = require(\"./BestAvailableLocale\");\nvar utils_1 = require(\"./utils\");\n/**\n * https://tc39.es/ecma402/#sec-bestfitmatcher\n * @param availableLocales\n * @param requestedLocales\n * @param getDefaultLocale\n */\nfunction BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {\n    var minimizedAvailableLocaleMap = {};\n    availableLocales.forEach(function (l) { return (minimizedAvailableLocaleMap[l] = l); });\n    var minimizedAvailableLocales = new Set();\n    availableLocales.forEach(function (locale) {\n        var minimizedLocale = new Intl.Locale(locale)\n            .minimize()\n            .toString();\n        minimizedAvailableLocaleMap[minimizedLocale] = locale;\n        minimizedAvailableLocales.add(minimizedLocale);\n    });\n    var foundLocale;\n    for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {\n        var l = requestedLocales_1[_i];\n        if (foundLocale) {\n            break;\n        }\n        var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');\n        if (availableLocales.has(noExtensionLocale)) {\n            foundLocale = noExtensionLocale;\n            break;\n        }\n        if (minimizedAvailableLocales.has(noExtensionLocale)) {\n            foundLocale = noExtensionLocale;\n            break;\n        }\n        var locale = new Intl.Locale(noExtensionLocale);\n        var maximizedRequestedLocale = locale.maximize().toString();\n        var minimizedRequestedLocale = locale.minimize().toString();\n        // Check minimized locale\n        if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {\n            foundLocale = minimizedRequestedLocale;\n            break;\n        }\n        // Lookup algo on maximized locale\n        foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);\n    }\n    return {\n        locale: (foundLocale && minimizedAvailableLocaleMap[foundLocale]) ||\n            getDefaultLocale(),\n    };\n}\nexports.BestFitMatcher = BestFitMatcher;\n"]},"metadata":{},"sourceType":"script"}